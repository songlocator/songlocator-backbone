// Generated by CoffeeScript 1.6.1
/*

  SongLocator for Backbone.

  2013 (c) Andrey Popp <8mayday@gmail.com>
*/

var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(root, factory) {
  var Backbone, _;
  if (typeof exports === 'object') {
    _ = require('underscore');
    Backbone = require('backbone');
    return module.exports = factory(_, Backbone, require);
  } else if (typeof define === 'function' && define.amd) {
    return define(function(require) {
      _ = require('underscore');
      Backbone = require('backbone');
      return root.Backbone.SongLocator = factory(_, Backbone, require);
    });
  } else {
    return root.Backbone.SongLocator = factory(root._, root.Backbone);
  }
})(this, function(_, Backbone, require) {
  var Collection, Model, ResolvedSongs, Song, Songs, Stream, extend, uniqueId;
  Collection = Backbone.Collection, Model = Backbone.Model;
  uniqueId = _.uniqueId, extend = _.extend;
  Stream = (function(_super) {

    __extends(Stream, _super);

    function Stream() {
      return Stream.__super__.constructor.apply(this, arguments);
    }

    return Stream;

  })(Model);
  Song = (function(_super) {

    __extends(Song, _super);

    function Song() {
      return Song.__super__.constructor.apply(this, arguments);
    }

    Song.prototype.initialize = function() {
      var _this = this;
      Song.__super__.initialize.apply(this, arguments);
      this.streams = this.get('streams') || new Collection();
      if (!(this.streams instanceof Collection)) {
        this.streams = new Collection(this.streams);
      }
      this.set('streams', this.streams);
      return this.listenTo(this.streams, 'change add remove destroy sort reset', function() {
        _this.trigger('change:streams', _this, _this.streams, {});
        return _this.trigger('change', _this, {});
      });
    };

    return Song;

  })(Model);
  Songs = (function(_super) {

    __extends(Songs, _super);

    function Songs() {
      return Songs.__super__.constructor.apply(this, arguments);
    }

    Songs.prototype.model = Song;

    Songs.prototype.equals = function(a, b) {
      return a.get('title').toLowerCase() === b.get('title').toLowerCase() && a.get('artist').toLowerCase() === b.get('artist').toLowerCase();
    };

    Songs.prototype.songForStream = function(stream) {
      var _this = this;
      return this.find(function(song) {
        return _this.equals(song, stream);
      });
    };

    Songs.prototype.addStream = function(stream) {
      var song, streams;
      if (!(stream instanceof Stream)) {
        stream = new Stream(stream);
      }
      song = this.songForStream(stream);
      if (song) {
        streams = song.streams.where({
          source: stream.source
        });
        if (streams.length === 0) {
          return song.streams.add(stream);
        }
      } else {
        song = new Song({
          title: stream.get('title'),
          artist: stream.get('artist'),
          streams: [stream]
        });
        return this.add(song);
      }
    };

    return Songs;

  })(Collection);
  ResolvedSongs = (function(_super) {

    __extends(ResolvedSongs, _super);

    function ResolvedSongs(resolver, songs, options) {
      var _this = this;
      ResolvedSongs.__super__.constructor.call(this, songs, options);
      this.resolver = resolver;
      this.qid = void 0;
      this.listenTo(this.resolver, 'results', function(r) {
        var stream, _i, _len, _ref, _results;
        if (r.qid !== _this.qid) {
          return;
        }
        _ref = r.results;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          stream = _ref[_i];
          _results.push(_this.addStream(stream));
        }
        return _results;
      });
    }

    ResolvedSongs.prototype.search = function(query) {
      this.qid = uniqueId('searchQID');
      this.resolver.search(this.qid, query);
      return this.reset();
    };

    ResolvedSongs.prototype.resolve = function(title, artist, album) {
      this.qid = uniqueId('resolveQID');
      this.resolver.resolve(this.qid, title, artist, album);
      return this.reset();
    };

    return ResolvedSongs;

  })(Songs);
  return {
    Song: Song,
    Stream: Stream,
    Songs: Songs,
    ResolvedSongs: ResolvedSongs
  };
});
