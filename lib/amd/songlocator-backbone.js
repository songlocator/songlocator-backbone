define(function(require, exports, module) {
// Generated by CoffeeScript 1.6.1
/*

  SongLocator for Backbone.

  2013 (c) Andrey Popp <8mayday@gmail.com>
*/

var Collection, Model, ResolvedSongs, Song, Songs, Stream, extend, uniqueId, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ref = require('backbone'), Collection = _ref.Collection, Model = _ref.Model;

_ref1 = require('underscore'), uniqueId = _ref1.uniqueId, extend = _ref1.extend;

Stream = (function(_super) {

  __extends(Stream, _super);

  function Stream() {
    return Stream.__super__.constructor.apply(this, arguments);
  }

  return Stream;

})(Model);

Song = (function(_super) {

  __extends(Song, _super);

  function Song() {
    return Song.__super__.constructor.apply(this, arguments);
  }

  Song.prototype.initialize = function() {
    Song.__super__.initialize.apply(this, arguments);
    this.streams = this.get('streams') || new Collection();
    if (!(this.streams instanceof Collection)) {
      this.streams = new Collection(this.streams);
    }
    return this.set('streams', this.streams);
  };

  return Song;

})(Model);

Songs = (function(_super) {

  __extends(Songs, _super);

  function Songs() {
    return Songs.__super__.constructor.apply(this, arguments);
  }

  Songs.prototype.model = Song;

  Songs.prototype.equals = function(a, b) {
    return a.get('title').toLowerCase() === b.get('title').toLowerCase() && a.get('artist').toLowerCase() === b.get('artist').toLowerCase();
  };

  Songs.prototype.songForStream = function(stream) {
    var _this = this;
    return this.find(function(song) {
      return _this.equals(song, stream);
    });
  };

  Songs.prototype.addStream = function(stream) {
    var song, streams;
    if (!(stream instanceof Stream)) {
      stream = new Stream(stream);
    }
    song = this.songForStream(stream);
    if (song) {
      streams = song.streams.where({
        source: stream.source
      });
      if (streams.length === 0) {
        return song.streams.add(stream);
      }
    } else {
      song = new Song({
        title: stream.get('title'),
        artist: stream.get('artist'),
        streams: [stream]
      });
      return this.add(song);
    }
  };

  return Songs;

})(Collection);

ResolvedSongs = (function(_super) {

  __extends(ResolvedSongs, _super);

  function ResolvedSongs(resolver, songs, options) {
    var _this = this;
    ResolvedSongs.__super__.constructor.call(this, songs, options);
    this.resolver = resolver;
    this.qid = void 0;
    this.listenTo(this.resolver, 'results', function(r) {
      var stream, _i, _len, _ref2, _results;
      if (r.qid !== _this.qid) {
        return;
      }
      _ref2 = r.results;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        stream = _ref2[_i];
        _results.push(_this.addStream(stream));
      }
      return _results;
    });
  }

  ResolvedSongs.prototype.search = function(query) {
    this.qid = uniqueId('searchQID');
    this.resolver.search(this.qid, query);
    return this.reset();
  };

  ResolvedSongs.prototype.resolve = function(title, artist, album) {
    this.qid = uniqueId('resolveQID');
    this.resolver.resolve(this.qid, title, artist, album);
    return this.reset();
  };

  return ResolvedSongs;

})(Songs);

extend(exports, {
  Song: Song,
  Stream: Stream,
  Songs: Songs,
  ResolvedSongs: ResolvedSongs
});
});
